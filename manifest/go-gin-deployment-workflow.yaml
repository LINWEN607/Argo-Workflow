apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: buildkit
spec:
  arguments:
    parameters:
      - name: repo
        value: https://gitee.com/eilinge/go-gin.git
      - name: branch
        value: master
      - name: path
        value: .
      - name: image
        value: eilinge/go-gin:v1.2
      - name: servername
        value: go-gin
      - name: namespace
        value: argo
      - name: port
        value: 8080
      - name: clusterIP
        value: "10.43.242.68"

  entrypoint: main
  # We use a volume claim template so that we can have a shared workspace.
  volumeClaimTemplates:
    - metadata:
        name: work
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 64Mi
  templates:
    - name: main
      dag:
        tasks:
          - name: clone
            template: clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
          - name: gotest
            template: gotest
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
            depends: "clone"
          - name: build
            template: build
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
            depends: "gotest"
          - name: image
            template: image
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
                - name: image
                  value: "{{workflow.parameters.image}}"
            depends: "build"
          - name: workload
            template: go-gin-server
            arguments:
              parameters:
                - name: servername
                  value: "{{workflow.parameters.servername}}"
                - name: namespace
                  value: "{{workflow.parameters.namespace}}"
                - name: image
                  value: "{{workflow.parameters.image}}"
                - name: port
                  value: "{{workflow.parameters.port}}"
            depends: "image"

    - name: clone
      inputs:
        parameters:
          - name: repo
          - name: branch
      container:
        volumeMounts:
          - mountPath: /work
            name: work
        image: docker.m.daocloud.io/alpine/git:v2.26.2
        workingDir: /work
        # Do a shallow clone, which is the fastest way to clone, by using the
        # --depth, --branch, and --single-branch options
        args:
          - clone
          - --depth
          - "1"
          - --branch
          - "{{inputs.parameters.branch}}"
          - --single-branch
          - "{{inputs.parameters.repo}}"
          - .

    - name: gotest
      inputs:
        parameters:
          - name: path
      container:
        image: golang:1.22.5
        volumeMounts:
          - mountPath: /work
            name: work
        workingDir: /work/{{inputs.parameters.path}}
        command:
          - go
        args:
          - test
          - -v
          - ./...

    - name: build
      inputs:
        parameters:
          - name: path
      container:
        image: golang:1.22.5
        volumeMounts:
          - mountPath: /work
            name: work
        workingDir: /work/{{inputs.parameters.path}}
        env:
          # Because this is not a Gomodule, we must turn modules off.
          - name: GO111MODULE
            value: "on"
          - name: CGO_ENABLED
            value: "0"
          - name: GOPROXY
            value: "https://goproxy.cn,direct"
        command:
          - go
        args:
          - build
          - -v
          - -o
          - /work/out/app

    - name: image
      inputs:
        parameters:
          - name: path
          - name: image
      # Mount the configuration so we can push the image.
      # This should create the /.docker/config.json file.
      volumes:
        - name: buildkitd-socket
          hostPath:
            path: /run/buildkit/buildkitd.sock
            type: Socket
      container:
        readinessProbe:
          exec:
            command: [ sh, -c, "buildctl debug workers" ]
        image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/moby/buildkit:latest
        volumeMounts:
          - name: work
            mountPath: /work
          - name: buildkitd-socket
            mountPath: /run/buildkit/buildkitd.sock
        workingDir: /work/{{inputs.parameters.path}}
        env:
          - name: BUILDKITD_FLAGS
            value: --oci-worker-no-process-sandbox
        command:
          - buildctl-daemonless.sh
        args:
          - build
          - --frontend
          - dockerfile.v0
          - --local
          - context=.
          - --local
          - dockerfile=.
          - --output
          - type=image,name=docker.io/{{inputs.parameters.image}},push=false

    - name: go-gin-server
      daemon: true
      inputs:
        parameters:
          - name: servername
          - name: namespace
          - name: image
          - name: port
      resource:
        action: patch
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: {{inputs.parameters.servername}}
            namespace: {{inputs.parameters.namespace}}
            labels:
              app: {{inputs.parameters.servername}}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: {{inputs.parameters.servername}}
            template:
              metadata:
                labels:
                  app: {{inputs.parameters.servername}}
              spec:
                containers:
                - image: {{inputs.parameters.image}}
                  imagePullPolicy: IfNotPresent
                  name: {{inputs.parameters.servername}}
                  ports:
                  - containerPort: {{inputs.parameters.port}}
                    name: web                                 
                    protocol: TCP
                  readinessProbe:
                    httpGet:
                      path: /ping
                      port: web
                    initialDelaySeconds: 5
                    timeoutSeconds: 1
                  resources:
                    requests:
                      cpu: 100m
                      memory: 100Mi
                    limits:
                      cpu: 300m
                      memory: 300Mi
